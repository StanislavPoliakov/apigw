{
	"info": {
		"_postman_id": "3541eada-be32-4eaa-91c3-fa5df0785163",
		"name": "APIGW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6534142"
	},
	"item": [
		{
			"name": "register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Register User\", function () {",
							"    pm.expect(pm.response.text()).to.be.oneOf([",
							"        \"User created!\",",
							"        \"This User is already created!\"",
							"    ]);",
							"",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 409])",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{validUsername}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{validPassword}}",
							"type": "text"
						},
						{
							"key": "firstName",
							"value": "John",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Smith",
							"type": "text"
						},
						{
							"key": "profile",
							"value": "product owner",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login user failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Failed login\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Not authorized!\");",
							"    pm.expect(pm.response.code).to.eq(401)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{invalidUsername}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{invalidPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login user successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Successful login\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(pm.response.code).to.eq(200)",
							"    pm.environment.set(\"jwtToken\", jsonData.token)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{validUsername}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{validPassword}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get profile successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"get profile successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eq(pm.environment.get(\"validUsername\"))",
							"    pm.expect(pm.response.code).to.eq(200)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "get profile invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Failed login\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Token is not valid or has expired\");",
							"    pm.expect(pm.response.code).to.eq(401)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "invalidtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "update profile successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Update successful\", function () {",
							"    pm.expect(pm.response.code).to.eq(200);",
							"    pm.expect(pm.response.text()).to.include(\"User updated!\"); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"username\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"profile\": \"team lead\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "update profile invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Failed update\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Token is not valid or has expired\");",
							"    pm.expect(pm.response.code).to.eq(401)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "invalidtoken",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"username\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"profile\": \"team lead\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "update profile invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Update successfull\", function () {",
							"    pm.expect(pm.response.code).to.eq(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{invalidUsername}}\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"profile\": \"team lead\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete profile successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"delete profile successful\", function () {",
							"    pm.expect(pm.response.code).to.eq(200)",
							"    pm.expect(pm.response.text()).to.include(\"User deleted!\"); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete profile no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"delete profile successful\", function () {",
							"    pm.expect(pm.response.code).to.eq(409)",
							"    pm.expect(pm.response.text()).to.include(",
							"        \"User not deleted!\\ncredentials deleted = false\\nprofile deleted = false\"",
							"        ); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete profile invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;",
							"",
							"pm.test(\"Failed update\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Token is not valid or has expired\");",
							"    pm.expect(pm.response.code).to.eq(401)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "invalidtoken",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		}
	]
}